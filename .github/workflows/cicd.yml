name: Java CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test-track-location:
    name: High Volume Track Location Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
      - run: |
          cd TourGuide
          mvn install:install-file -Dfile=./libs/gpsUtil.jar -DgroupId=gpsUtil -DartifactId=gpsUtil -Dversion=1.0.0 -Dpackaging=jar
          mvn install:install-file -Dfile=./libs/RewardCentral.jar -DgroupId=rewardCentral -DartifactId=rewardCentral -Dversion=1.0.0 -Dpackaging=jar
          mvn install:install-file -Dfile=./libs/TripPricer.jar -DgroupId=tripPricer -DartifactId=tripPricer -Dversion=1.0.0 -Dpackaging=jar
          mvn test -Dtest=TestTrackLocationPerformance

  test-get-rewards:
    name: High Volume Get Rewards Test
    runs-on: ubuntu-latest
    needs: test-track-location
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
      - run: |
          cd TourGuide
          mvn install:install-file -Dfile=./libs/gpsUtil.jar -DgroupId=gpsUtil -DartifactId=gpsUtil -Dversion=1.0.0 -Dpackaging=jar
          mvn install:install-file -Dfile=./libs/RewardCentral.jar -DgroupId=rewardCentral -DartifactId=rewardCentral -Dversion=1.0.0 -Dpackaging=jar
          mvn install:install-file -Dfile=./libs/TripPricer.jar -DgroupId=tripPricer -DartifactId=tripPricer -Dversion=1.0.0 -Dpackaging=jar
          mvn test -Dtest=TestGetRewardsPerformance

  test-and-report:
    runs-on: ubuntu-latest
    needs: [test-get-rewards]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
      - run: |
          cd TourGuide
          mvn install:install-file -Dfile=./libs/gpsUtil.jar -DgroupId=gpsUtil -DartifactId=gpsUtil -Dversion=1.0.0 -Dpackaging=jar
          mvn install:install-file -Dfile=./libs/RewardCentral.jar -DgroupId=rewardCentral -DartifactId=rewardCentral -Dversion=1.0.0 -Dpackaging=jar
          mvn install:install-file -Dfile=./libs/TripPricer.jar -DgroupId=tripPricer -DartifactId=tripPricer -Dversion=1.0.0 -Dpackaging=jar
          mvn clean verify jacoco:report surefire-report:report-only javadoc:javadoc

      - uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: TourGuide/target/site/jacoco/
      - uses: actions/upload-artifact@v4
        with:
          name: javadoc
          path: TourGuide/target/site/apidocs/
      - uses: actions/upload-artifact@v4
        with:
          name: surefire-report
          path: TourGuide/target/site/
      - uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: TourGuide/target/*.jar
      - uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: TourGuide/target

  docker-build:
    runs-on: ubuntu-latest
    needs: test-and-report
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
      - run: |
          cd TourGuide
          mvn install:install-file -Dfile=./libs/gpsUtil.jar -DgroupId=gpsUtil -DartifactId=gpsUtil -Dversion=1.0.0 -Dpackaging=jar
          mvn install:install-file -Dfile=./libs/RewardCentral.jar -DgroupId=rewardCentral -DartifactId=rewardCentral -Dversion=1.0.0 -Dpackaging=jar
          mvn install:install-file -Dfile=./libs/TripPricer.jar -DgroupId=tripPricer -DartifactId=tripPricer -Dversion=1.0.0 -Dpackaging=jar
          mvn clean install
      - id: vars
        run: echo "short_sha=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
      - run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/p8:latest -t ${{ secrets.DOCKER_USERNAME }}/p8:${{ env.short_sha }} .
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/p8:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/p8:${{ env.short_sha }}
